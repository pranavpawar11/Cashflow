import React, { useEffect, useRef, useContext, useState } from 'react';
import { useNavigate, NavLink } from 'react-router-dom';
import { Container, Row, Col, Card, Badge, Button } from 'react-bootstrap';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faWallet, faArrowUp, faArrowDown, faChartPie, faPlus } from '@fortawesome/free-solid-svg-icons';
import { Chart, registerables } from 'chart.js';
import ExpenseContext from '../context/expenseContext';

Chart.register(...registerables);

function Home() {
    const context = useContext(ExpenseContext);
    const { getTransactions, initializeCurrentMonthGraphData, calculateTotalsAndBudget, initializeGraphData, transactionsData } = context;
    const [cardData, setCardData] = useState([]);
    const navigate = useNavigate();
    const [selectedMonth, setSelectedMonth] = useState("August 2024");
    const [filterCategory, setFilterCategory] = useState('');

    const filteredTransactions = transactionsData[selectedMonth]?.filter(
        transaction => filterCategory === '' || transaction.category === filterCategory
    ) || [];

    useEffect(() => {
        const initalTrasactionsData = async () => {    
            if (localStorage.getItem('authToken')) {
                await getTransactions();
            } else {
                navigate('/login');
            }
        }
        initalTrasactionsData()
    }, []);

    useEffect(() => {
        const fetchAndSetData = async () => {
            const { totalIncome, totalExpenses, budgetPercentage } = await calculateTotalsAndBudget();
            setCardData([
                { title: "Total Balance", value: `₹${totalIncome - totalExpenses}`, icon: faWallet, color: "primary" },
                { title: "Total Income", value: `₹${totalIncome}`, icon: faArrowUp, color: "success" },
                { title: "Total Expenses", value: `₹${totalExpenses}`, icon: faArrowDown, color: "danger" },
                { title: "Budget Status", value: `${budgetPercentage}% used`, icon: faChartPie, color: "warning" }
            ]);
        };
        fetchAndSetData();
    }, [calculateTotalsAndBudget]);

    const pieChartRef = useRef(null);
    const lineChartRef = useRef(null);
    const pieChartInstance = useRef(null);
    const lineChartInstance = useRef(null);

    useEffect(() => {
        const fetchAndInitializeGraphData = async () => {
            const gData = await initializeGraphData(transactionsData);
            const labels_data = Object.keys(gData);
            const values_data = Object.values(gData);

            if (pieChartRef.current) {
                if (pieChartInstance.current) {
                    pieChartInstance.current.destroy();
                }

                pieChartInstance.current = new Chart(pieChartRef.current, {
                    type: 'pie',
                    data: {
                        labels: labels_data,
                        datasets: [{
                            label: ' Amount ',
                            data: values_data,
                            backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0'],
                            borderColor: '#fff',
                            borderWidth: 2
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function (tooltipItem) {
                                        const dataset = tooltipItem.dataset;
                                        const currentvalue = dataset.data[tooltipItem.dataIndex];
                                        const total = dataset.data.reduce((acc, value) => acc + value, 0);
                                        const percentage = ((currentvalue / total) * 100).toFixed(2);
                                        return `Amount: ₹${currentvalue.toLocaleString()} (${percentage}%)`
                                    },
                                },
                            },
                            legend: {
                                position: 'bottom'
                            },
                        },
                    }
                });
            }
        };

        fetchAndInitializeGraphData();

        return () => {
            if (pieChartInstance.current) {
                pieChartInstance.current.destroy();
            }
        };
    }, [initializeGraphData, transactionsData]);

    useEffect(() => {
        const updateChartData = async () => {
            const { incomeData, expensesData, balanceData, labels } = await initializeCurrentMonthGraphData();

            if (lineChartRef.current) {
                if (lineChartInstance.current) {
                    lineChartInstance.current.destroy();
                }

                lineChartInstance.current = new Chart(lineChartRef.current, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                label: 'Income',
                                data: incomeData,
                                borderColor: '#4A90E2',
                                backgroundColor: 'rgba(74, 144, 226, 0.2)',
                                fill: true,
                                tension: 0.4
                            },
                            {
                                label: 'Expenses',
                                data: expensesData,
                                borderColor: '#D0021B',
                                backgroundColor: 'rgba(208, 8, 27, 0.2)',
                                fill: true,
                                tension: 0.4
                            },
                            {
                                label: 'Balance',
                                data: balanceData,
                                borderColor: '#20ad6b',
                                backgroundColor: 'rgba(76, 175, 80, 0.2)',
                                fill: true,
                                tension: 0.4
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'top',
                            },
                        },
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
        };

        updateChartData();
    }, [initializeCurrentMonthGraphData]);

    return (
        <Container fluid className="home-container py-4 bg-light">
            <Row className="mb-4 align-items-center">
                <Col xs={12} md={6}>
                    <h1 className="welcome-text text-primary fw-bold">Hello, Pranav!</h1>
                    <p className="text-muted">Here's your financial overview for this month.</p>
                </Col>
                <Col xs={12} md={6} className="text-md-end">
                    <Button variant="outline-primary" className="me-2" onClick={() => navigate("/addincome")}>
                        <FontAwesomeIcon icon={faPlus} className="me-2" />
                        Add Income
                    </Button>
                    <Button variant="outline-danger" onClick={() => navigate("/addexpense")}>
                        <FontAwesomeIcon icon={faPlus} className="me-2" />
                        Add Expense
                    </Button>
                </Col>
            </Row>

            <Row className="mb-4">
                {cardData.map((item, index) => (
                    <Col key={index} lg={3} md={6} sm={12} className="mb-3">
                        <Card className={`overview-card border-0 shadow-sm rounded-3 h-100`}>
                            <Card.Body className="d-flex flex-column">
                                <div className={`icon-bg d-flex align-items-center justify-content-center mb-3 rounded-circle bg-${item.color}`} style={{width: '50px', height: '50px'}}>
                                    <FontAwesomeIcon icon={item.icon} size="lg" className="text-white" />
                                </div>
                                <Card.Title className="mb-2 text-dark">{item.title}</Card.Title>
                                <Card.Text className={`text-${item.color} fw-bold fs-4 mt-auto`}>{item.value}</Card.Text>
                            </Card.Body>
                        </Card>
                    </Col>
                ))}
            </Row>

            <Row className="mb-4">
                <Col lg={6} md={12} className="mb-3">
                    <Card className="chart-card h-100 border-0 shadow-sm">
                        <Card.Body>
                            <Card.Title className="mb-4">Spending Overview</Card.Title>
                            <canvas ref={pieChartRef} height="300" />
                        </Card.Body>
                    </Card>
                </Col>
                <Col lg={6} md={12} className="mb-3">
                    <Card className="chart-card h-100 border-0 shadow-sm">
                        <Card.Body>
                            <Card.Title className="mb-4">Income vs. Expenses</Card.Title>
                            <canvas ref={lineChartRef} height="300" />
                        </Card.Body>
                    </Card>
                </Col>
            </Row>

            <Row className="mb-4">
                <Col>
                    <Card className="border-0 shadow-sm">
                        <Card.Body className="p-4">
                            <Card.Title className="mb-4">Recent Transactions</Card.Title>
                            {filteredTransactions.length > 0 ? (
                                <div className="table-responsive">
                                    <table className="table table-hover">
                                        <thead className="bg-light">
                                            <tr className="d-none d-md-table-row">
                                                <th>Date</th>
                                                <th>Category</th>
                                                <th>Description</th>
                                                <th>Tag</th>
                                                <th>Type</th>
                                                <th>Amount</th>
                                            </tr>
                                            <tr className="d-md-none">
                                                <th>Date</th>
                                                <th>Amount</th>
                                                <th>Type</th>
                                            </tr>
                                        </thead>
                                        <tbody className='tbody-data'>
                                            {filteredTransactions.slice(0, 3).map((transaction, index) => (
                                                <React.Fragment key={index}>
                                                    <tr className="d-none d-md-table-row">
                                                        <td>{transaction.date}</td>
                                                        <td>
                                                            <Badge bg="secondary" pill>{transaction.category}</Badge>
                                                        </td>
                                                        <td>{transaction.description}</td>
                                                        <td>
                                                            <Badge bg="info" pill>{transaction.tag}</Badge>
                                                        </td>
                                                        <td>
                                                            <Badge bg={transaction.type === 'Income' ? 'success' : 'danger'} pill>
                                                                {transaction.type}
                                                            </Badge>
                                                        </td>
                                                        <td className={`fw-bold ${transaction.type === 'Income' ? 'text-success' : 'text-danger'}`}>
                                                            ₹{transaction.amount.toLocaleString()}
                                                        </td>
                                                    </tr>
                                                    <tr className="d-md-none">
                                                        <td>{transaction.date}</td>
                                                        <td className={`fw-bold ${transaction.type === 'Income' ? 'text-success' : 'text-danger'}`}>
                                                            ₹{transaction.amount.toLocaleString()}
                                                        </td>
                                                        <td>
                                                            <Badge bg={transaction.type === 'Income' ? 'success' : 'danger'} pill>
                                                                {transaction.type}
                                                            </Badge>
                                                        </td>
                                                    </tr>
                                                </React.Fragment>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                            ) : (
                                <p className="text-center">No transactions found for this month.</p>
                            )}
                            <NavLink to="/allTransactions" className="btn btn-outline-primary mt-3">View All Transactions</NavLink>
                        </Card.Body>
                    </Card>
                </Col>
            </Row>
        </Container>
    );
}

export default Home;